Resources:
  RDS:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: collection-log-rds
      DBName: collection_log
      MasterUsername: !Sub ${env:DB_USER}
      MasterUserPassword: !Sub ${env:DB_PASS}
      Engine: postgres
      EngineVersion: 12.5
      DBInstanceClass: db.t2.small
      AllocatedStorage: 20
      PubliclyAccessible: false
      DBSubnetGroupName: !Ref RDSSubnetGroup
      VPCSecurityGroups: 
        - !GetAtt RDSSecurityGroup.GroupId
      Tags:
        - Key: Name
          Value: collection-log-rds

  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: collection-log RDS subnet group
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
      Tags:
        - Key: Name
          Value: collection-log-sng

  RDSProxy:
    Type: AWS::RDS::DBProxy
    Properties:
      DBProxyName: collection-log-rds-proxy
      EngineFamily: POSTGRESQL
      RoleArn: !GetAtt RDSProxyRole.Arn
      Auth:
        - AuthScheme: SECRETS
          IAMAuth: DISABLED
          SecretArn: !Ref RDSSecret
      VpcSecurityGroupIds:
        - !Ref RDSSecurityGroup
      VpcSubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB

  RDSProxyTargetGroup:
    Type: AWS::RDS::DBProxyTargetGroup
    Properties:
      TargetGroupName: default
      DBProxyName: !Ref RDSProxy
      DBInstanceIdentifiers:
        - !Ref RDS

  RDSSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      SecretString: !Sub '{"username": "${env:DB_USER}", "password": "${env:DB_PASS}"}'

  RDSProxyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: rds.amazonaws.com
      Policies:
        - PolicyName: collection-log-rds-proxy-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: secretsmanager:GetSecretValue
                Resource: !Ref RDSSecret
              - Effect: Allow
                Action: kms:Decrypt
                Resource: !Sub arn:aws:kms:${self:provider.region}:${AWS::AccountId}:key/*
                Condition:
                  StringEquals:
                    kms:ViaService: !Sub secretsmanager.${self:provider.region}.amazonaws.com
