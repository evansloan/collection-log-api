service: collection-log-api
app: collection-log-api
frameworkVersion: "2"
useDotenv: true

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: ${opt:stage, 'local'}
  region: us-east-1
  logRetentionInDays: 14

  environment:
    STAGE_NAME: ${self:provider.stage}

    DB_DIALECT: postgres
    DB_NAME: ${env:DB_NAME}
    DB_USER: ${env:DB_USER}
    DB_PASS: ${env:DB_PASS}
    DB_HOST: ${env:DB_HOST}
    DB_PORT: ${env:DB_PORT}

  vpc:
    securityGroupIds:
      - !Ref LambdaSecurityGroup
    subnetIds:
      - !Ref PrivateSubnetA
      - !Ref PrivateSubnetB

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - ec2:CreateNetworkInterface
            - ec2:DescribeNetworkInterfaces
            - ec2:DeleteNetworkInterface
            - ec2:AssignPrivateIpAddresses
            - ec2:UnassignPrivateIpAddresses
          Resource: '*'

functions:
  create-collection-log:
    handler: src/handlers/collectionlog/create-collection-log.createHandler
    timeout: 29
    events:
      - httpApi:
          path: /collectionlog
          method: post

  get-collection-log-by-username:
    handler: src/handlers/collectionlog/get-by-username.getCollectionLogByUsernameHandler
    timeout: 25
    events:
      - httpApi:
          path: /collectionlog/user/{username}
          method: get

  update-collection-log:
    handler: src/handlers/collectionlog/update-collection-log.updateCollectionLogHandler
    timeout: 29
    memorySize: 2048
    events:
      - httpApi:
          path: /collectionlog/{runelite_id}
          method: put

  create-user:
    handler: src/handlers/user/create-user.createHandler
    events:
      - httpApi:
          path: /user
          method: post

  get-user-typeahead:
    handler: src/handlers/user/get-user-typeahead.typeaheadHandler
    events:
      - httpApi:
          path: /user/typeahead/{username}
          method: get

  get-user-count:
    handler: src/handlers/user/get-user-count.getUserCountHandler
    events:
      - httpApi:
          path: /user/count
          method: get

  get-items-recent:
    handler: src/handlers/items/get-recent-items.recentItemsHandler
    timeout: 25
    events:
      - httpApi:
          path: /items/recent/{username}
          method: get

  get-items-page-by-username:
    handler: src/handlers/items/get-page-by-username.getPageByUsernameHandler
    events:
      - httpApi:
          path: /items/user/{username}
          method: get

  get-items-recent-global:
    handler: src/handlers/items/get-recent-items-global.recentItemsGlobalHandler
    timeout: 25
    events:
      - httpApi:
          path: /items/global
          method: get

  get-hiscores:
    handler: src/handlers/hiscores/get-hiscores.getHiscoresHandler
    timeout: 25
    events:
      - httpApi:
          path: /hiscores/{page}
          method: get

  get-hiscores-rank-by-username:
    handler: src/handlers/hiscores/get-rank-by-username.getRankByUsernameHandler
    events:
      - httpApi:
          path: /hiscores/rank/{username}
          method: get

plugins:
  - serverless-plugin-typescript
  - serverless-tscpaths
  - serverless-domain-manager
  - serverless-offline
 
custom:
  dev:
    domainName: dev.api.collectionlog.net

  prod:
    domainName: api.collectionlog.net

  customDomain:
    domainName: ${self:custom.${self:provider.stage}.domainName}
    certificateName: api.collectionlog.net
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true
    apiType: http
    endpointType: regional

resources:
  - ${file(resources/vpc.yml)}
  - ${file(resources/securitygroup.yml)}
  - ${file(resources/route.yml)}
  - ${file(resources/rds.yml)}
