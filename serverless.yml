service: collection-log-api
app: collection-log-api
frameworkVersion: "2"
useDotenv: true

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: ${opt:stage, 'local'}
  region: us-east-1

  environment:
    STAGE_NAME: ${self:provider.stage}

    DB_DIALECT: postgres
    DB_NAME: ${env:DB_NAME}
    DB_USER: ${env:DB_USER}
    DB_PASS: ${env:DB_PASS}
    DB_HOST: ${env:DB_HOST}
    DB_PORT: ${env:DB_PORT}

    UPDATE_LOG_SQS_URL: ${self:custom.${self:provider.stage}.updateCollectionLogQueue}
    UPDATE_ENTRY_SQS_URL: ${self:custom.${self:provider.stage}.updateEntryQueue}

  vpc:
    securityGroupIds:
      - !Ref LambdaSecurityGroup
    subnetIds:
      - !Ref PrivateSubnetA
      - !Ref PrivateSubnetB

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - ec2:CreateNetworkInterface
            - ec2:DescribeNetworkInterfaces
            - ec2:DeleteNetworkInterface
            - ec2:AssignPrivateIpAddresses
            - ec2:UnassignPrivateIpAddresses
          Resource: '*'

        - Effect: Allow
          Action:
            - sqs:*
          Resource: !GetAtt CollectionLogUpdateSQSQueue.Arn

functions:
  # HTTP endpoint functions

  createCollectionLog:
    handler: src/handlers/endpoints/collectionlog.create
    timeout: 25
    events:
      - httpApi:
          path: /collectionlog
          method: post

  getCollectionLog:
    handler: src/handlers/endpoints/collectionlog.get
    timeout: 25
    events:
      - httpApi:
          path: /collectionlog/{id}
          method: get

  getCollectionLogByRuneliteId:
    handler: src/handlers/endpoints/collectionlog.getByRuneliteId
    timeout: 25
    events:
      - httpApi:
          path: /collectionlog/runelite/{runelite_id}
          method: get

  getCollectionLogByUsername:
    handler: src/handlers/endpoints/collectionlog.getByUsername
    timeout: 25
    events:
      - httpApi:
          path: /collectionlog/user/{username}
          method: get

  updateCollectionLog:
    handler: src/handlers/endpoints/collectionlog.update
    timeout: 25
    memorySize: 2048
    events:
      - httpApi:
          path: /collectionlog/{runelite_id}
          method: put

  collectionLogExists:
    handler: src/handlers/endpoints/collectionlog.collectionLogExists
    events:
      - httpApi:
          path: /collectionlog/exists/{runeliteId}
          method: get

  createUser:
    handler: src/handlers/endpoints/user.create
    events:
      - httpApi:
          path: /user
          method: post
  
  getUser:
    handler: src/handlers/endpoints/user.get
    events:
      - httpApi:
          path: /user/{id}
          method: get

  updateUser:
    handler: src/handlers/endpoints/user.update
    events:
      - httpApi:
          path: /user/{id}
          method: put

  getUniqueHiscores:
    handler: src/handlers/endpoints/hiscores.unique
    events:
      - httpApi:
          path: /hiscores/unique/{page}
          method: get

  getTotalHiscores:
    handler: src/handlers/endpoints/hiscores.total
    events:
      - httpApi:
          path: /hiscores/total/{page}
          method: get

  recentCollectionLogItems:
    handler: src/handlers/endpoints/items.recentItems
    timeout: 25
    events:
      - httpApi:
          path: /items/recent/{username}
          method: get

  getEntryItemsByUsername:
    handler: src/handlers/endpoints/items.getEntryItemsByUsername
    events:
      - httpApi:
          path: /items/user/{username}
          method: get

  # SQS queue event functions

  collectionLogUpdateEvent:
    handler: src/handlers/events/collectionlog.updateCollectionLog
    events:
      - sqs:
          arn: !GetAtt CollectionLogUpdateSQSQueue.Arn

  collectionLogEntryUpdateEvent:
    handler: src/handlers/events/collectionlog.updateCollectionLogEntry
    events:
      - sqs:
          arn: !GetAtt CollectionLogEntryUpdateSQSQueue.Arn

plugins:
  - serverless-plugin-typescript
  - serverless-tscpaths
  - serverless-domain-manager
  - serverless-offline-sqs
  - serverless-offline
 
custom:
  local:
    updateCollectionLogQueue: '${self:custom.serverless-offline-sqs.endpoint}/queue/collection-log-update-sqs-queue.fifo'
    updateEntryQueue: '${self:custom.serverless-offline-sqs.endpoint}/queue/collection-log-entry-update-sqs-queue.fifo'

  dev:
    domainName: dev.api.collectionlog.net

  prod:
    domainName: api.collectionlog.net
    updateCollectionLogQueue: !Ref CollectionLogUpdateSQSQueue
    updateEntryQueue: !Ref CollectionLogUpdateEntrySQSQueue

  customDomain:
    domainName: ${self:custom.${self:provider.stage}.domainName}
    certificateName: api.collectionlog.net
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true
    apiType: http
    endpointType: regional

  serverless-offline-sqs:
    skipCacheInvalidation: false
    autoCreate: true
    endpoint: http://0.0.0.0:9324
    region: ${self:provider.region}
    accessKeyId: root
    secretAccessKey: root

resources:
  - ${file(resources/vpc.yml)}
  - ${file(resources/securitygroup.yml)}
  - ${file(resources/route.yml)}
  - ${file(resources/rds.yml)}
  - ${file(resources/sqs.yml)}
