service: collection-log-api
app: collection-log-api
frameworkVersion: "2"
useDotenv: true

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: ${opt:stage, 'dev'}
  region: us-east-1

  environment:
    STAGE_NAME: ${self:provider.stage}	
    DB_DIALECT: postgres
    DB_NAME: ${env:DB_NAME}
    DB_USER: ${env:DB_USER}
    DB_PASS: ${env:DB_PASS}
    DB_HOST: ${env:DB_HOST}
    DB_PORT: ${env:DB_PORT}

  vpc:
    securityGroupIds:
      - !Ref LambdaSecurityGroup
    subnetIds:
      - !Ref PrivateSubnetA
      - !Ref PrivateSubnetB

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - ec2:CreateNetworkInterface
            - ec2:DescribeNetworkInterfaces
            - ec2:DeleteNetworkInterface
            - ec2:AssignPrivateIpAddresses
            - ec2:UnassignPrivateIpAddresses
          Resource: '*'

functions:
  createCollectionLog:
    handler: src/handlers/collectionLog.create
    timeout: 25
    events:
      - httpApi:
          path: /collectionlog
          method: post

  getCollectionLog:
    handler: src/handlers/collectionLog.get
    timeout: 25
    events:
      - httpApi:
          path: /collectionlog/{id}
          method: get

  getCollectionLogByRuneliteId:
    handler: src/handlers/collectionLog.getByRuneliteId
    events:
      - httpApi:
          path: /collectionlog/runelite/{runelite_id}
          method: get

  getCollectionLogByUsername:
    handler: src/handlers/collectionLog.getByUsername
    events:
      - httpApi:
          path: /collectionlog/user/{username}
          method: get

  updateCollectionLog:
    handler: src/handlers/collectionLog.update
    timeout: 25
    events:
      - httpApi:
          path: /collectionlog/{runelite_id}
          method: put

  collectionLogExists:
    handler: src/handlers/collectionLog.collectionLogExists
    events:
      - httpApi:
          path: /collectionlog/exists/{runeliteId}
          method: get

  recentCollectionLogItems:
    handler: src/handlers/collectionLog.recentItems
    events:
      - httpApi:
          path: /collectionlog/recent/{username}
          method: get

  createUser:
    handler: src/handlers/user.create
    events:
      - httpApi:
          path: /user
          method: post
  
  getUser:
    handler: src/handlers/user.get
    events:
      - httpApi:
          path: /user/{id}
          method: get

  updateUser:
    handler: src/handlers/user.update
    events:
      - httpApi:
          path: /user/{id}
          method: put

  getUniqueHiscores:
    handler: src/handlers/hiscores.unique
    events:
      - httpApi:
          path: /hiscores/unique/{page}
          method: get

  getTotalHiscores:
    handler: src/handlers/hiscores.total
    events:
      - httpApi:
          path: /hiscores/total/{page}
          method: get

plugins:
  - serverless-plugin-typescript
  - serverless-domain-manager
  - serverless-offline
 
custom:
  dev:
    domainName: dev.api.collectionlog.net

  prod:
    domainName: api.collectionlog.net

  customDomain:
    domainName: ${self:custom.${self:provider.stage}.domainName}
    certificateName: api.collectionlog.net
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true
    apiType: http
    endpointType: regional

resources:
  - ${file(resources/vpc.yml)}
  - ${file(resources/securitygroup.yml)}
  - ${file(resources/route.yml)}
  - ${file(resources/rds.yml)}
